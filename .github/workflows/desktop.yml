name: "Desktop App Build"

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "packages/tauri/**"
      - "packages/web/**"
      - "packages/shared/**"
      - ".github/workflows/desktop.yml"
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "packages/tauri/**"
      - "packages/web/**"
      - "packages/shared/**"
      - ".github/workflows/desktop.yml"
  workflow_dispatch:

env:
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

jobs:
  build-desktop:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            arch: "silicon"
            os: "darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            arch: "intel"
            os: "darwin"
          # Linux build
          - platform: "ubuntu-22.04"
            args: ""
            arch: "x86_64"
            os: "linux"
          # Windows build
          - platform: "windows-latest"
            args: ""
            arch: "x86_64"
            os: "windows"

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install system dependencies for Linux
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # Setup Node.js with pnpm cache
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      # Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      # Setup Rust toolchain
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # Install targets for macOS universal builds
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./packages/tauri/src-tauri -> target"
          cache-on-failure: true

      # Install frontend dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Build web package first (required for Tauri)
      - name: Build web package
        run: pnpm --filter web build

      # Verify Tauri configuration exists
      - name: Check Tauri configuration
        run: |
          if [ ! -f "packages/tauri/src-tauri/tauri.conf.json" ]; then
            echo "Error: tauri.conf.json not found"
            echo "Expected path: packages/tauri/src-tauri/tauri.conf.json"
            ls -la packages/tauri/
            exit 1
          fi
        shell: bash

      # Build Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: "./packages/tauri"
          args: ${{ matrix.args }}
          # Only create release on tags
          includeRelease: false
          includeUpdaterJson: false

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-app-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            packages/tauri/src-tauri/target/release/bundle/
          retention-days: 30

  # Job to create a release when building from a tag
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-desktop
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*
          generate_release_notes: true
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
