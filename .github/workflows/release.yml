name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Create release
      id: create-release
      uses: actions/github-script@v7
      with:
        script: |
          const { data } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ steps.get-version.outputs.version }}',
            name: 'Noteum ${{ steps.get-version.outputs.version }}',
            body: 'Release notes will be added here.',
            draft: true,
            prerelease: false
          })
          return data.id

  build-tauri:
    name: Build and Release Tauri App
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
        - platform: 'macos-latest'
          args: '--target aarch64-apple-darwin'
          rust-target: 'aarch64-apple-darwin'
        - platform: 'macos-latest'
          args: '--target x86_64-apple-darwin' 
          rust-target: 'x86_64-apple-darwin'
        - platform: 'ubuntu-20.04'
          args: ''
          rust-target: 'x86_64-unknown-linux-gnu'
        - platform: 'windows-latest'
          args: ''
          rust-target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.rust-target }}

    - name: Install dependencies (ubuntu only)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install frontend dependencies
      run: pnpm install --frozen-lockfile

    - name: Run prepare release script
      run: |
        chmod +x .github/scripts/prepare-release.sh
        .github/scripts/prepare-release.sh "${{ needs.create-release.outputs.version }}"

    - name: Build and Release Tauri application
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      with:
        releaseId: ${{ needs.create-release.outputs.release-id }}
        args: ${{ matrix.args }}
        projectPath: packages/tauri

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    
    steps:
    - name: Publish release
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release-id }},
            draft: false
          })