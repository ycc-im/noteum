---
title: API 设计规范
category: architecture
version: 1.0
lastUpdated: 2025-04-21
description: tRPC API 设计规范和最佳实践
---

<TableOfContents>
  - [基本原则](#基本原则)
  - [tRPC 路由设计](#trpc-路由设计)
  - [客户端集成考虑](#客户端集成考虑)
  - [性能优化](#性能优化)
  - [安全规范](#安全规范)
  - [测试规范](#测试规范)
  - [最佳实践](#最佳实践)
</TableOfContents>

# 基本原则

<PrincipleList>
  - 类型安全优先
  - 端到端一致性
  - 优化性能
  - 支持实时通信
  - 跨平台兼容
</PrincipleList>

# tRPC 路由设计

## 命名规范

<CodeBlock language="typescript" title="路由命名示例">
// ✅ 推荐
export const userRouter = router({
  getById: publicProcedure
    .input(z.string())
    .query(({ input }) => { /* ... */ }),
    
  create: protectedProcedure
    .input(createUserSchema)
    .mutation(({ input }) => { /* ... */ }),
});

// ❌ 避免
export const userRouter = router({
  getUserById: procedure, // 避免动词前缀
  createNewUser: procedure, // 过于冗长
});
</CodeBlock>

## 输入验证

<CodeBlock language="typescript" title="Schema 定义">
import { z } from 'zod';

export const createUserSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
  role: z.enum(['user', 'admin']),
});

export const updateUserSchema = createUserSchema.partial();
</CodeBlock>

## 错误处理

<CodeBlock language="typescript" title="错误处理示例">
import { TRPCError } from '@trpc/server';

// 统一的错误处理
throw new TRPCError({
  code: 'NOT_FOUND',
  message: '用户不存在',
  // 可选: 包含额外上下文
  cause: error,
});
</CodeBlock>

# 客户端集成考虑

## 离线支持

<CodeBlock language="typescript" title="离线操作支持">
// 定义可离线操作
export const noteRouter = router({
  create: protectedProcedure
    .input(createNoteSchema)
    .mutation(({ input }) => {
      // 1. 支持离线创建
      // 2. 同步后解决冲突
      // 3. 维护本地状态
    }),
});
</CodeBlock>

## 数据同步策略

<CodeBlock language="typescript" title="实时数据订阅">
// 实时数据订阅
export const syncRouter = router({
  onNotesUpdate: protectedProcedure
    .subscription(({ ctx }) => {
      return observable<Note[]>((emit) => {
        // 实现实时数据推送
      });
    }),
});
</CodeBlock>

## 批量操作支持

<CodeBlock language="typescript" title="批量操作">
export const batchRouter = router({
  processBatch: protectedProcedure
    .input(z.array(operationSchema))
    .mutation(async ({ input }) => {
      // 处理批量操作
    }),
});
</CodeBlock>

# 性能优化

## 查询优化

<CodeBlock language="typescript" title="数据加载优化">
// 数据预加载
export const noteRouter = router({
  getWithRelations: publicProcedure
    .input(getNoteSchema)
    .query(async ({ input, ctx }) => {
      // 使用 dataloader 批量加载关联数据
    }),
});
</CodeBlock>

## 缓存策略

<CodeBlock language="typescript" title="缓存配置">
// 实现客户端缓存
const trpc = createTRPCProxyClient<AppRouter>({
  links: [
    cacheLink({
      ttl: 60, // 缓存时间（秒）
    }),
    httpLink({
      url: 'http://localhost:3000/trpc',
    }),
  ],
});
</CodeBlock>

# 安全规范

## 认证与授权

<CodeBlock language="typescript" title="权限控制">
// 中间件实现
const isAuthed = middleware(({ next, ctx }) => {
  if (!ctx.user) {
    throw new TRPCError({ code: 'UNAUTHORIZED' });
  }
  return next({
    ctx: {
      user: ctx.user,
    },
  });
});

// 受保护的过程
const protectedProcedure = publicProcedure.use(isAuthed);
</CodeBlock>

## 速率限制

<CodeBlock language="typescript" title="速率限制">
const rateLimiter = middleware(async ({ next, ctx }) => {
  await checkRateLimit(ctx);
  return next();
});

export const apiRouter = router({
  highLoadEndpoint: publicProcedure
    .use(rateLimiter)
    .mutation(async () => { /* ... */ }),
});
</CodeBlock>

# 测试规范

## 单元测试

<CodeBlock language="typescript" title="单元测试示例">
describe('userRouter', () => {
  it('should create user', async () => {
    const caller = appRouter.createCaller(ctx);
    
    const result = await caller.user.create({
      name: 'Test User',
      email: 'test@example.com',
    });
    
    expect(result).toBeDefined();
  });
});
</CodeBlock>

## 集成测试

<CodeBlock language="typescript" title="集成测试示例">
import { createInnerTRPCContext } from '../src/context';

describe('API Integration', () => {
  it('should handle complete workflow', async () => {
    const ctx = await createInnerTRPCContext(mockReq);
    const caller = appRouter.createCaller(ctx);
    
    // 测试完整业务流程
  });
});
</CodeBlock>

# 最佳实践

<BestPractices>
  - 类型定义
    * 使用 Zod 进行运行时验证
    * 确保类型完整性
    * 避免使用 any 类型

  - 错误处理
    * 统一错误码
    * 提供详细错误信息
    * 实现错误追踪

  - 性能优化
    * 实现数据预加载
    * 使用批量查询
    * 优化实时更新

  - 客户端适配
    * 支持离线操作
    * 实现数据同步
    * 处理网络状态

  - 安全性
    * 实施认证授权
    * 添加速率限制
    * 数据验证
</BestPractices>