# Noteum Workspace Rules
version: 1.0

# Project Basic Information
project:
  name: noteum
  type: monorepo
  packageManager: bun

# bun.js Environment Requirements
environment:
  bun: ">=1.0.0"

# Workspace Configuration
workspace:
  root: /
  packages:
    - packages/*

# Build Rules
build:
  command: bun run build
  order:
    - packages/utils
    - packages/core
    - packages/ui
    - packages/server
    - packages/web

# Test Rules
test:
  command: bun test
  coverage:
    required: true
    threshold: 80

# Code Quality Rules
quality:
  pull_requests:
    language:
      required: true
      value: "en"
      applies_to:
        - title
        - description
        - comments
        - review_comments
  typescript: strict
  linting:
    enabled: true
    tools:
      - eslint
      - prettier
  commitlint:
    enabled: true
    convention: conventional
    rules:
      type:
        required: true
        allowed:
          major_version:
            description: "Disruptive changes, incompatible modifications"
            triggers:
              - breaking change marker (!)
              - explicit breaking changes in commit message
          minor_version:
            description: "Compatible changes, new features"
            triggers:
              - commit type is 'feat'
          patch_version:
            description: "Compatible changes, bug fixes, and documentation updates"
            triggers:
              - commit type is 'fix'
              - commit type is 'docs'
              - commit type is 'perf'
              - commit type is 'refactor'
              - other non-feature commits
      scope:
        required: true
        description: "monorepo package name or common area"
        allowed:
          - core
          - ui
          - server
          - utils
          - web
          - deps
          - release
          - common
      subject:
        required: true
        case: "lower"
        max-length: 100
        language: "en"
      body:
        required: false
        language: "en"
      footer:
        required: false
        language: "en"
      message-format: "{type}({scope}): {subject}"
      examples:
        - "feat(ui): add new Button component"
        - "fix(core): resolve memory leak in data processing"
        - "docs(web): update API documentation"
        - "refactor(utils): optimize string handling functions"

pull_requests:
  tools:
    recommended: gh
    description: "GitHub CLI (gh) is the preferred tool for creating and managing pull requests"
  body:
    format: markdown
    required: true
    description: "Pull request descriptions must use Markdown formatting for clear and structured communication"
  template:
    required: true
    sections:
      - title: "Description"
        required: true
        language: "en"
        guidance: |
          Provide a clear, concise overview of the PR's purpose.
          Explain the problem being solved or the improvement being made.

      - title: "Changes"
        required: true
        language: "en"
        format: "bullet points"
        guidance: |
          Use action verbs (Added, Refactored, Updated)
          Focus on high-level impact, not technical details
          Explain what changed and why

      - title: "Testing"
        required: true
        language: "en"
        description: "Describe test coverage and verification methods"
        guidance: |
          List types of tests performed
          Include test results and coverage
          Provide steps to reproduce tests

      - title: "Screenshots"
        required: false
        description: "Visual evidence of changes"

      - title: "Checklist"
        required: true
        items:
          - "Code follows project conventions"
          - "Unit tests added/updated"
          - "Documentation updated"
          - "Type definitions verified"
          - "Performance and compatibility checked"
          - "No new linting/type errors introduced"
    naming:
      pattern: "{type}/{scope}/{description}"
      example: "feat/ui/add-button-component"
      language: "en"
    labels:
      required: true
      categories:
        - type: ["feature", "bugfix", "documentation", "enhancement"]
        - scope: ["core", "ui", "server", "utils", "web"]
        - status: ["ready-for-review", "in-progress", "needs-discussion"]

# Dependency Management
dependencies:
  peerDependencies:
    allowAny: true
  versioning:
    strategy: fixed
    tool: workspaces

# Documentation Requirements
documentation:
  required: true
  locations:
    - README.md
    - docs/
    - packages/*/README.md

# === Definition-First File Rule ===
file_definition:
  # Definition-First Workflow Enforcement
  definition_first_workflow:
    enabled: true
    description: |
      All new source code features or files must follow a strict definition-first workflow:
      1. The definition (.md) file must be written and reviewed/approved before any test or implementation code is added.
      2. Unit tests must be written according to the approved definition file, and reviewed/approved before implementation.
      3. Implementation code (.ts, .js, etc.) can only be written after both the definition and test files are approved.
      This process ensures clarity, reduces ambiguity, and improves maintainability and AI-friendliness.
    enforcement:
      - Do not create test or implementation files before the definition file is approved.
      - Do not create implementation files before the test file is approved.
      - All steps require explicit human approval before proceeding to the next.
    exceptions:
      - Bug fixes for existing files may skip definition if the purpose is clear and unchanged.
      - Documentation-only changes.
    note: |
      This workflow is mandatory for all new features, utilities, and modules.
  enabled: true
  description: |
    Every source code file (such as .ts, .tsx, .js, .py, etc.) must have a corresponding .md file as its definition document.
    The .md file should be written before the code implementation, clearly describing the file's design purpose, inputs, outputs, dependencies, constraints, and other key aspects.
    This improves team collaboration, maintainability, and enables LLMs to understand and generate code more accurately.
  template:
    - Purpose: Briefly describe the main function and business context of this code file.
    - Inputs: List the main inputs (such as parameters, dependencies, external data, etc.).
    - Outputs: List the main outputs (such as return values, exports, side effects, etc.).
    - Dependencies: List other modules or resources this file depends on.
    - Constraints: List any special constraints or caveats for this file.
    - Examples: Provide usage examples or sample calls.
    - ChangeLog: Important modification records.
  validation:
    check_md_for_each_code_file: true
    check_code_for_each_md_file: true
    auto_sync: false # Optional: whether to auto-generate code skeletons or doc drafts
  file_types:
    - .ts
    - .tsx
    - .js
    - .jsx
    - .py
  exceptions:
    - README.md
    - Pure config files (such as .json, .yml, .env, etc.)
  note: |
    This "definition-first" development approach aims to improve code quality, maintainability, and AI-friendliness.
    Team members should always write and maintain the corresponding .md file when creating or updating a code file.

# CI/CD Configuration
ci:
  provider: github-actions
  triggers:
    - push
    - pull_request

# Docker Support
docker:
  enabled: true
  services:
    - dev
  commands:
    build: docker-compose build
    dev: docker-compose up -d

  # Component File Structure Rules
  # files naming
  file_naming:
    components: "PascalCase"
    utils: "camelCase"
    test: "*.test.ts"
    story: "*.stories.tsx"

  # directory naming
  directory_naming:
    components: "kebab-case"
    utils: "kebab-case"
    hooks: "kebab-case"

  # component structure
  component_structure:
    main_component:
      pattern: "{ComponentName}.tsx" # Main component file (e.g., Button.tsx)
      case: "PascalCase" # Use PascalCase
    stories:
      pattern: "{ComponentName}.stories.tsx" # Stories file (e.g., Button.stories.tsx)
      case: "PascalCase" # Use PascalCase
    test:
      pattern: "{ComponentName}.test.tsx" # Test file (e.g., Button.test.tsx)
      case: "PascalCase" # Use PascalCase
    types:
      pattern: "{ComponentName}.types.ts" # Type definitions file (e.g., Button.types.ts)
      case: "PascalCase" # Use PascalCase
    utils:
      pattern: "{componentName}.utils.ts" # Utility functions file (e.g., button.utils.ts)
      case: "camelCase" # Use camelCase
    index:
      pattern: "index.ts" # Export file
      case: "lowercase" # Use lowercase
