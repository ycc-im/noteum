/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodayRouteImport } from './routes/today'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as NotesIndexRouteImport } from './routes/notes/index'
import { Route as NotebooksIndexRouteImport } from './routes/notebooks/index'

const TodayRoute = TodayRouteImport.update({
  id: '/today',
  path: '/today',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIndexRoute = NotesIndexRouteImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotebooksIndexRoute = NotebooksIndexRouteImport.update({
  id: '/notebooks/',
  path: '/notebooks/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/today': typeof TodayRoute
  '/notebooks': typeof NotebooksIndexRoute
  '/notes': typeof NotesIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/today': typeof TodayRoute
  '/notebooks': typeof NotebooksIndexRoute
  '/notes': typeof NotesIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/today': typeof TodayRoute
  '/notebooks/': typeof NotebooksIndexRoute
  '/notes/': typeof NotesIndexRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/login'
    | '/today'
    | '/notebooks'
    | '/notes'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard' | '/login' | '/today' | '/notebooks' | '/notes' | '/settings'
  id:
    | '__root__'
    | '/dashboard'
    | '/login'
    | '/today'
    | '/notebooks/'
    | '/notes/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  TodayRoute: typeof TodayRoute
  NotebooksIndexRoute: typeof NotebooksIndexRoute
  NotesIndexRoute: typeof NotesIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/today': {
      id: '/today'
      path: '/today'
      fullPath: '/today'
      preLoaderRoute: typeof TodayRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/': {
      id: '/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notebooks/': {
      id: '/notebooks/'
      path: '/notebooks'
      fullPath: '/notebooks'
      preLoaderRoute: typeof NotebooksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  TodayRoute: TodayRoute,
  NotebooksIndexRoute: NotebooksIndexRoute,
  NotesIndexRoute: NotesIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
