// Prisma schema for Noteum Services
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Utility function for ULID generation
// Note: ULID will be handled at application level
// This schema uses String types for ULID fields

// pgvector extension will be enabled via migration
// CREATE EXTENSION IF NOT EXISTS vector;

// User Roles Enum
enum UserRole {
  ADMIN
  USER
  VIEWER
}

// Permission Levels Enum
enum Permission {
  READ
  WRITE
  ADMIN
  OWNER
}

// User Profile Model
model UserProfile {
  id          String   @id
  userid      Int      @unique @map("user_id")
  firstname   String   @map("firstname")
  lastname    String   @map("lastname")
  displayname String   @map("displayname")
  avatar      String?  @map("avatar")
  bio         String?  @map("bio")
  preferences Json?    @map("preferences")
  createdat   DateTime @default(now()) @map("createdat")
  updatedat   DateTime @updatedAt @map("updatedat")

  user        User     @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// User Model
model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  username     String      @unique
  passwordhash String      @map("passwordhash")
  isactive     Boolean     @default(true) @map("isactive")
  role         UserRole    @default(USER) @map("role")
  createdat    DateTime    @default(now()) @map("createdat")
  updatedat    DateTime    @updatedAt @map("updatedat")
  lastloginat  DateTime?   @map("lastloginat")

  profile      UserProfile?
  sessions     Session[]

  @@map("users")
}

// Session Model
model Session {
  id         String   @id
  userid     Int      @map("user_id")
  tokenhash  String   @map("token_hash")
  expiresat  DateTime @map("expires_at")
  deviceinfo Json?    @map("device_info")
  ipaddress  String   @map("ip_address")
  useragent  String   @map("user_agent")
  isactive   Boolean  @default(true) @map("isactive")
  createdat  DateTime @default(now()) @map("createdat")
  updatedat  DateTime @updatedAt @map("updatedat")

  user       User     @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@map("sessions")
}