# Docker Compose configuration for Noteum project
# Full-stack development environment with PostgreSQL, pgAdmin, Web, and Server services
# Use docker-compose.override.yml for development-specific configurations


services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: noteum-postgres
    environment:
      POSTGRES_DB: noteum
      POSTGRES_USER: noteum_user
      POSTGRES_PASSWORD: noteum_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - noteum-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U noteum_user -d noteum"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: noteum-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@noteum.dev
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - noteum-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # Server Application (NestJS API)
  server:
    build:
      context: .
      dockerfile: packages/server/Dockerfile
      target: production
    container_name: noteum-server
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: "postgresql://noteum_user:noteum_password@postgres:5432/noteum"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: noteum
      POSTGRES_USER: noteum_user
      POSTGRES_PASSWORD: noteum_password
      GRPC_HOST: "0.0.0.0"
      GRPC_PORT: 5001
    ports:
      - "3001:3001"
      - "5001:5001"
    networks:
      - noteum-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Web Application (TanStack Start - React)
  web:
    build:
      context: .
      dockerfile: packages/web/Dockerfile
      target: production
    container_name: noteum-web
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: "0.0.0.0"
      API_URL: "http://server:3001"
    ports:
      - "3000:3000"
    networks:
      - noteum-network
    restart: unless-stopped
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "http.get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Volumes for data persistence
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# Networks for service communication
networks:
  noteum-network:
    driver: bridge
    name: noteum-network