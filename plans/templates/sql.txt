create table public.note (
  id integer generated always as identity primary key,
  title text not null,
  content text not null,
  user_id uuid not null default next_auth.uid(),
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  archived boolean not null default false
);

comment on table public.note is 'Stores each user note with title, content, timestamps and an archival flag. Access is restricted so that only the owning user (user_id) may select, insert, update, or delete their notes.';

alter table public.note enable row level security;

create policy "Select note policy" on public.note as permissive for select using (next_auth.uid() = user_id);
create policy "Insert note policy" on public.note as permissive for insert to authenticated with check (next_auth.uid() = user_id);
create policy "Update note policy" on public.note as permissive for update using (next_auth.uid() = user_id);
create policy "Delete note policy" on public.note as permissive for delete using (next_auth.uid() = user_id);