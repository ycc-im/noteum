We are building a next js project based on an existing next js template that have auth, payment built already, below are rules you have to follow:

<frontend rules>
1. MUST Use 'use client' directive for client-side components; In Next.js, page components are server components by default, and React hooks like useEffect can only be used in client components.
2. The UI has to look great, using polished component from shadcn, tailwind when possible; Don't recreate shadcn components, make sure you use 'shadcn@latest add xxx' CLI to add components
3. MUST adding debugging log & comment for every single feature we implement
4. Make sure to concatenate strings correctly using backslash
7. Use stock photos from picsum.photos where appropriate, only valid URLs you know exist
8. Don't update shadcn components unless otherwise specified
9. Configure next.config.js image remotePatterns to enable stock photos from picsum.photos
11. MUST implement the navigation elements items in their rightful place i.e. Left sidebar, Top header
12. Accurately implement necessary grid layouts
13. Follow proper import practices:
   - Use @/ path aliases
   - Keep component imports organized
   - Update current src/app/page.tsx with new comprehensive code
   - Don't forget root route (page.tsx) handling
   - You MUST complete the entire prompt before stopping
</frontend rules>

<styling_requirements>
- You ALWAYS tries to use the shadcn/ui library.
- You MUST USE the builtin Tailwind CSS variable based colors as used in the examples, like bg-primary or text-primary-foreground.
- You DOES NOT use indigo or blue colors unless specified in the prompt.
- You MUST generate responsive designs.
- The React Code Block is rendered on top of a white background. If v0 needs to use a different background color, it uses a wrapper element with a background color Tailwind class.
</styling_requirements>

<frameworks_and_libraries>
- You prefers Lucide React for icons, and shadcn/ui for components.
- You MAY use other third-party libraries if necessary or requested by the user.
- You imports the shadcn/ui components from "@/components/ui"
- You DOES NOT use fetch or make other network requests in the code.
- You DOES NOT use dynamic imports or lazy loading for components or libraries. Ex: const Confetti = dynamic(...) is NOT allowed. Use import Confetti from 'react-confetti' instead.
- Prefer using native Web APIs and browser features when possible. For example, use the Intersection Observer API for scroll-based animations or lazy loading.
</frameworks_and_libraries>

# Data Sync & Authentication Refinement Implementation Guide

## Task
Ensure that all note actions (create, read, update, delete) are securely linked to the authenticated user and provide real-time updates.

## Implementation Guide

### 1. Secure Note Actions with User Authentication

#### Step 1: Update Supabase Client for Authenticated Requests
- **Location**: `utils/supabase/client.ts`
- **Action**: Ensure the Supabase client is configured to include the authenticated user's token in requests.
- **Details**:
  - Use the `createSupabaseClient` function to include the user's access token in the request headers.
  - This ensures that all requests are authenticated and scoped to the current user.

```typescript
import { createClient } from "@supabase/supabase-js";
import { auth } from "@/lib/auth";

export async function createSupabaseClient() {
  const session = await auth();
  // @ts-ignore
  const { supabaseAccessToken } = session;

  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      global: {
        headers: {
          Authorization: `Bearer ${supabaseAccessToken}`,
        },
      }
    }
  );
}
```

#### Step 2: Implement Server Actions for Note Operations
- **Location**: `app/actions/notes.ts`
- **Action**: Create server actions for creating, updating, and deleting notes.
- **Details**:
  - Use Supabase utilities to interact with the database.
  - Ensure each action checks the user's authentication status and note ownership.

```typescript
import { createSupabaseAdminClient } from '@/utils/supabase/server';

export async function createNote(title: string, content: string) {
  const supabaseAdmin = await createSupabaseAdminClient();
  const { data, error } = await supabaseAdmin.from('note').insert([{ title, content }]);
  if (error) {
    console.error('Error creating note:', error);
    throw error;
  }
  return data;
}

export async function updateNote(id: string, updates: Partial<Note>) {
  const supabaseAdmin = await createSupabaseAdminClient();
  const { data, error } = await supabaseAdmin.from('note').update(updates).eq('id', id);
  if (error) {
    console.error('Error updating note:', error);
    throw error;
  }
  return data;
}

export async function deleteNote(id: string) {
  const supabaseAdmin = await createSupabaseAdminClient();
  const { data, error } = await supabaseAdmin.from('note').delete().eq('id', id);
  if (error) {
    console.error('Error deleting note:', error);
    throw error;
  }
  return data;
}
```

### 2. Real-Time Data Sync

#### Step 3: Implement Real-Time Updates with Supabase
- **Location**: `app/notes/page.tsx` and `app/notes/[id].tsx`
- **Action**: Use Supabase's real-time capabilities to listen for changes in the notes table.
- **Details**:
  - Set up a subscription to the notes table to receive updates in real-time.
  - Update the local state when changes are detected.

```typescript
import { useEffect } from 'react';
import { createSupabaseClient } from '@/utils/supabase/client';

export default function NotesPage() {
  const [notes, setNotes] = useState<Note[]>([]);

  useEffect(() => {
    const supabase = createSupabaseClient();

    const subscription = supabase
      .from('note')
      .on('*', payload => {
        console.log('Change received!', payload);
        // Update local state based on the change type
        if (payload.eventType === 'INSERT') {
          setNotes(prevNotes => [...prevNotes, payload.new]);
        } else if (payload.eventType === 'UPDATE') {
          setNotes(prevNotes => prevNotes.map(note => note.id === payload.new.id ? payload.new : note));
        } else if (payload.eventType === 'DELETE') {
          setNotes(prevNotes => prevNotes.filter(note => note.id !== payload.old.id));
        }
      })
      .subscribe();

    return () => {
      supabase.removeSubscription(subscription);
    };
  }, []);

  return (
    // Render notes list
  );
}
```

### 3. Feedback and Error Handling

#### Step 4: Implement User Feedback
- **Location**: Throughout the notes pages
- **Action**: Use shadcn/ui alerts to provide feedback on note actions.
- **Details**:
  - Display success messages when actions complete successfully.
  - Show error messages if any action fails.

```typescript
import { Alert } from "@/components/ui";

function showAlert(message: string, type: 'success' | 'error') {
  return (
    <Alert type={type}>
      {message}
    </Alert>
  );
}

// Example usage
showAlert('Note saved successfully!', 'success');
showAlert('Failed to delete note.', 'error');
```

### Summary
- Ensure all note actions are securely linked to the authenticated user by using Supabase clients with user tokens.
- Implement server actions for note operations, ensuring they validate user authentication and note ownership.
- Use Supabase's real-time capabilities to keep the UI in sync with the database.
- Provide user feedback using shadcn/ui alerts for a better user experience.