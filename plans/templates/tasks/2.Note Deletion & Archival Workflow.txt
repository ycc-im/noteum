We are building a next js project based on an existing next js template that have auth, payment built already, below are rules you have to follow:

<frontend rules>
1. MUST Use 'use client' directive for client-side components; In Next.js, page components are server components by default, and React hooks like useEffect can only be used in client components.
2. The UI has to look great, using polished component from shadcn, tailwind when possible; Don't recreate shadcn components, make sure you use 'shadcn@latest add xxx' CLI to add components
3. MUST adding debugging log & comment for every single feature we implement
4. Make sure to concatenate strings correctly using backslash
7. Use stock photos from picsum.photos where appropriate, only valid URLs you know exist
8. Don't update shadcn components unless otherwise specified
9. Configure next.config.js image remotePatterns to enable stock photos from picsum.photos
11. MUST implement the navigation elements items in their rightful place i.e. Left sidebar, Top header
12. Accurately implement necessary grid layouts
13. Follow proper import practices:
   - Use @/ path aliases
   - Keep component imports organized
   - Update current src/app/page.tsx with new comprehensive code
   - Don't forget root route (page.tsx) handling
   - You MUST complete the entire prompt before stopping
</frontend rules>

<styling_requirements>
- You ALWAYS tries to use the shadcn/ui library.
- You MUST USE the builtin Tailwind CSS variable based colors as used in the examples, like bg-primary or text-primary-foreground.
- You DOES NOT use indigo or blue colors unless specified in the prompt.
- You MUST generate responsive designs.
- The React Code Block is rendered on top of a white background. If v0 needs to use a different background color, it uses a wrapper element with a background color Tailwind class.
</styling_requirements>

<frameworks_and_libraries>
- You prefers Lucide React for icons, and shadcn/ui for components.
- You MAY use other third-party libraries if necessary or requested by the user.
- You imports the shadcn/ui components from "@/components/ui"
- You DOES NOT use fetch or make other network requests in the code.
- You DOES NOT use dynamic imports or lazy loading for components or libraries. Ex: const Confetti = dynamic(...) is NOT allowed. Use import Confetti from 'react-confetti' instead.
- Prefer using native Web APIs and browser features when possible. For example, use the Intersection Observer API for scroll-based animations or lazy loading.
</frameworks_and_libraries>

# Note Deletion & Archival Workflow Implementation Guide

## Task
Implement the note deletion and archival workflow to allow users to manage their notes effectively by either deleting or archiving them.

## Implementation Guide

### 1. Update Note Detail Page

**Location:** `app/notes/[id].tsx`

**Scope:**
- Add "Delete" and "Archive" buttons to the note detail page.
- Use `shadcn/ui` components for buttons and modals.
- Ensure the UI is responsive and matches the overall design.

**Steps:**
1. **Import Required Components:**
   - Import `Button` and `Modal` from `@/components/ui`.
   - Import `useState` and `useEffect` from React.

2. **Add State for Modal Visibility:**
   - Create state variables to manage the visibility of the delete and archive confirmation modals.

   ```typescript
   const [isDeleteModalOpen, setDeleteModalOpen] = useState(false);
   const [isArchiveModalOpen, setArchiveModalOpen] = useState(false);
   ```

3. **Render Buttons:**
   - Add "Delete" and "Archive" buttons to the page, styled with `shadcn/ui` components.

   ```jsx
   <Button variant="destructive" onClick={() => setDeleteModalOpen(true)}>
     Delete
   </Button>
   <Button variant="secondary" onClick={() => setArchiveModalOpen(true)}>
     Archive
   </Button>
   ```

4. **Implement Modals:**
   - Use `Modal` components to confirm deletion or archival actions.

   ```jsx
   <Modal isOpen={isDeleteModalOpen} onClose={() => setDeleteModalOpen(false)}>
     <div className="p-4">
       <h2 className="text-lg font-bold">Confirm Deletion</h2>
       <p>Are you sure you want to delete this note?</p>
       <Button variant="destructive" onClick={handleDelete}>
         Confirm
       </Button>
       <Button onClick={() => setDeleteModalOpen(false)}>Cancel</Button>
     </div>
   </Modal>

   <Modal isOpen={isArchiveModalOpen} onClose={() => setArchiveModalOpen(false)}>
     <div className="p-4">
       <h2 className="text-lg font-bold">Confirm Archival</h2>
       <p>Are you sure you want to archive this note?</p>
       <Button variant="secondary" onClick={handleArchive}>
         Confirm
       </Button>
       <Button onClick={() => setArchiveModalOpen(false)}>Cancel</Button>
     </div>
   </Modal>
   ```

### 2. Implement Server Actions

**Location:** `app/actions/notes.ts`

**Scope:**
- Create server actions to handle note deletion and archival.
- Use Supabase utilities to update the database.

**Steps:**
1. **Create Delete Note Action:**
   - Define a function to delete a note by its ID.

   ```typescript
   import { createSupabaseAdminClient } from '@/utils/supabase/server';

   export async function deleteNote(noteId: string) {
     const supabase = await createSupabaseAdminClient();
     const { error } = await supabase.from('note').delete().eq('id', noteId);
     if (error) {
       console.error('Error deleting note:', error);
       throw error;
     }
   }
   ```

2. **Create Archive Note Action:**
   - Define a function to archive a note by setting its `archived` flag to `true`.

   ```typescript
   export async function archiveNote(noteId: string) {
     const supabase = await createSupabaseAdminClient();
     const { error } = await supabase.from('note').update({ archived: true }).eq('id', noteId);
     if (error) {
       console.error('Error archiving note:', error);
       throw error;
     }
   }
   ```

### 3. Connect UI to Server Actions

**Location:** `app/notes/[id].tsx`

**Scope:**
- Connect the UI buttons to the server actions for deletion and archival.

**Steps:**
1. **Import Server Actions:**
   - Import `deleteNote` and `archiveNote` from `app/actions/notes.ts`.

2. **Handle Button Clicks:**
   - Implement `handleDelete` and `handleArchive` functions to call the respective server actions.

   ```typescript
   async function handleDelete() {
     try {
       await deleteNote(noteId);
       // Redirect to notes list or show success message
     } catch (error) {
       console.error('Failed to delete note:', error);
     } finally {
       setDeleteModalOpen(false);
     }
   }

   async function handleArchive() {
     try {
       await archiveNote(noteId);
       // Update UI or show success message
     } catch (error) {
       console.error('Failed to archive note:', error);
     } finally {
       setArchiveModalOpen(false);
     }
   }
   ```

### 4. Update UI State

**Location:** `app/notes/page.tsx`

**Scope:**
- Ensure the notes list updates to reflect changes after deletion or archival.

**Steps:**
1. **Fetch Updated Notes:**
   - After a note is deleted or archived, refetch the notes list to update the UI.

2. **Use State Management:**
   - Use the `NoteState` interface to manage the list of notes and update it accordingly.

   ```typescript
   // Example of updating notes state
   setNotes((prevNotes) => prevNotes.filter((note) => note.id !== noteId));
   ```

### Summary

- **UI Enhancements:** Added "Delete" and "Archive" buttons with confirmation modals using `shadcn/ui`.
- **Server Actions:** Implemented `deleteNote` and `archiveNote` functions using Supabase.
- **Integration:** Connected UI actions to server logic, ensuring the notes list updates dynamically.

By following these steps, the note deletion and archival workflow will be seamlessly integrated into the "noteum" application, providing users with a robust note management experience.