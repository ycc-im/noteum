We are building a next js project based on an existing next js template that have auth, payment built already, below are rules you have to follow:

<frontend rules>
1. MUST Use 'use client' directive for client-side components; In Next.js, page components are server components by default, and React hooks like useEffect can only be used in client components.
2. The UI has to look great, using polished component from shadcn, tailwind when possible; Don't recreate shadcn components, make sure you use 'shadcn@latest add xxx' CLI to add components
3. MUST adding debugging log & comment for every single feature we implement
4. Make sure to concatenate strings correctly using backslash
7. Use stock photos from picsum.photos where appropriate, only valid URLs you know exist
8. Don't update shadcn components unless otherwise specified
9. Configure next.config.js image remotePatterns to enable stock photos from picsum.photos
11. MUST implement the navigation elements items in their rightful place i.e. Left sidebar, Top header
12. Accurately implement necessary grid layouts
13. Follow proper import practices:
   - Use @/ path aliases
   - Keep component imports organized
   - Update current src/app/page.tsx with new comprehensive code
   - Don't forget root route (page.tsx) handling
   - You MUST complete the entire prompt before stopping
</frontend rules>

<styling_requirements>
- You ALWAYS tries to use the shadcn/ui library.
- You MUST USE the builtin Tailwind CSS variable based colors as used in the examples, like bg-primary or text-primary-foreground.
- You DOES NOT use indigo or blue colors unless specified in the prompt.
- You MUST generate responsive designs.
- The React Code Block is rendered on top of a white background. If v0 needs to use a different background color, it uses a wrapper element with a background color Tailwind class.
</styling_requirements>

<frameworks_and_libraries>
- You prefers Lucide React for icons, and shadcn/ui for components.
- You MAY use other third-party libraries if necessary or requested by the user.
- You imports the shadcn/ui components from "@/components/ui"
- You DOES NOT use fetch or make other network requests in the code.
- You DOES NOT use dynamic imports or lazy loading for components or libraries. Ex: const Confetti = dynamic(...) is NOT allowed. Use import Confetti from 'react-confetti' instead.
- Prefer using native Web APIs and browser features when possible. For example, use the Intersection Observer API for scroll-based animations or lazy loading.
</frameworks_and_libraries>

# Notes List Page â€“ Home for Notes Implementation Guide

## Task
Implement a Notes List Page that allows authenticated users to view, search, and manage their notes.

## Implementation Guide

### 1. Set Up the Page Structure

- **Location**: `app/notes/page.tsx`
- **Objective**: Create a page that displays a list of notes for the authenticated user.

#### Steps:
1. **Create the Page Component**:
   - Define a new page component in `app/notes/page.tsx`.
   - Use the `shadcn/ui` components for layout and styling.

2. **Import Necessary Libraries**:
   - Import React, useState, and useEffect from React.
   - Import Supabase client utilities from `utils/supabase/front.ts`.
   - Import `shadcn/ui` components like `Card`, `Input`, and `Button`.
   - Import Lucide React icons for UI elements like the search bar.

### 2. Fetch and Display Notes

- **Objective**: Retrieve the user's notes from the database and display them in a list.

#### Steps:
1. **Set Up State Management**:
   - Define state variables for `notes` and `searchText` using `useState`.

2. **Fetch Notes from Supabase**:
   - Use the Supabase client to fetch notes in a `useEffect` hook.
   - Ensure the query filters notes by the authenticated user's ID.
   - Handle loading and error states appropriately.

   ```typescript
   import { useEffect, useState } from 'react';
   import { createSupabaseClient } from '@/utils/supabase/front';

   const NotesPage = () => {
     const [notes, setNotes] = useState<Note[]>([]);
     const [searchText, setSearchText] = useState('');

     useEffect(() => {
       const fetchNotes = async () => {
         const supabase = await createSupabaseClient();
         const { data, error } = await supabase.from('note').select().eq('user_id', userId);
         if (error) {
           console.error('Error fetching notes:', error);
         } else {
           setNotes(data);
         }
       };

       fetchNotes();
     }, []);
   ```

3. **Render Notes List**:
   - Use `shadcn/ui` `Card` components to display each note.
   - Include note title, a content snippet, and the last updated timestamp.

   ```typescript
   return (
     <div className="p-4">
       <div className="mb-4">
         <Input
           placeholder="Search notes..."
           value={searchText}
           onChange={(e) => setSearchText(e.target.value)}
           icon={<LucideIcon name="search" />}
         />
       </div>
       <div className="grid gap-4">
         {notes.map((note) => (
           <Card key={note.id} className="bg-primary text-primary-foreground">
             <h3>{note.title}</h3>
             <p>{note.content.substring(0, 100)}...</p>
             <span>{new Date(note.updated_at).toLocaleDateString()}</span>
           </Card>
         ))}
       </div>
     </div>
   );
   ```

### 3. Implement Search Functionality

- **Objective**: Allow users to filter notes by title or content.

#### Steps:
1. **Filter Notes Based on Search Text**:
   - Use the `searchText` state to filter the `notes` array.
   - Update the displayed notes list based on the search input.

   ```typescript
   const filteredNotes = notes.filter((note) =>
     note.title.toLowerCase().includes(searchText.toLowerCase()) ||
     note.content.toLowerCase().includes(searchText.toLowerCase())
   );
   ```

2. **Update the Render Method**:
   - Render `filteredNotes` instead of `notes`.

### 4. Navigation and Interaction

- **Objective**: Enable users to navigate to a note's detail view.

#### Steps:
1. **Add Click Handler to Notes**:
   - Wrap each `Card` component with a clickable element that navigates to the note's detail page.

   ```typescript
   import { useRouter } from 'next/router';

   const router = useRouter();

   const handleNoteClick = (noteId: string) => {
     router.push(`/notes/${noteId}`);
   };

   // In the render method
   <Card key={note.id} onClick={() => handleNoteClick(note.id)} className="cursor-pointer">
     {/* Note content */}
   </Card>
   ```

### 5. Finalize and Style

- **Objective**: Ensure the page is visually appealing and responsive.

#### Steps:
1. **Apply Tailwind CSS Classes**:
   - Use Tailwind CSS classes for spacing, colors, and responsiveness.
   - Ensure the layout adapts to different screen sizes.

2. **Test the Page**:
   - Verify that notes load correctly and the search functionality works.
   - Ensure navigation to the note detail page functions as expected.

By following these steps, you will create a functional and visually appealing Notes List Page that allows users to view, search, and manage their notes effectively.