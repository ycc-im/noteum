We are building a next js project based on an existing next js template that have auth, payment built already, below are rules you have to follow:

<frontend rules>
1. MUST Use 'use client' directive for client-side components; In Next.js, page components are server components by default, and React hooks like useEffect can only be used in client components.
2. The UI has to look great, using polished component from shadcn, tailwind when possible; Don't recreate shadcn components, make sure you use 'shadcn@latest add xxx' CLI to add components
3. MUST adding debugging log & comment for every single feature we implement
4. Make sure to concatenate strings correctly using backslash
7. Use stock photos from picsum.photos where appropriate, only valid URLs you know exist
8. Don't update shadcn components unless otherwise specified
9. Configure next.config.js image remotePatterns to enable stock photos from picsum.photos
11. MUST implement the navigation elements items in their rightful place i.e. Left sidebar, Top header
12. Accurately implement necessary grid layouts
13. Follow proper import practices:
   - Use @/ path aliases
   - Keep component imports organized
   - Update current src/app/page.tsx with new comprehensive code
   - Don't forget root route (page.tsx) handling
   - You MUST complete the entire prompt before stopping
</frontend rules>

<styling_requirements>
- You ALWAYS tries to use the shadcn/ui library.
- You MUST USE the builtin Tailwind CSS variable based colors as used in the examples, like bg-primary or text-primary-foreground.
- You DOES NOT use indigo or blue colors unless specified in the prompt.
- You MUST generate responsive designs.
- The React Code Block is rendered on top of a white background. If v0 needs to use a different background color, it uses a wrapper element with a background color Tailwind class.
</styling_requirements>

<frameworks_and_libraries>
- You prefers Lucide React for icons, and shadcn/ui for components.
- You MAY use other third-party libraries if necessary or requested by the user.
- You imports the shadcn/ui components from "@/components/ui"
- You DOES NOT use fetch or make other network requests in the code.
- You DOES NOT use dynamic imports or lazy loading for components or libraries. Ex: const Confetti = dynamic(...) is NOT allowed. Use import Confetti from 'react-confetti' instead.
- Prefer using native Web APIs and browser features when possible. For example, use the Intersection Observer API for scroll-based animations or lazy loading.
</frameworks_and_libraries>

# Create New Note Feature Implementation Guide

## Task
Implement the "Create New Note" feature in the noteum application.

## Implementation Guide

### Overview
The "Create New Note" feature allows users to create a new note with a title and rich text content. This feature will be accessible via a dedicated route and will use a rich text editor for content input. The user can save the note, which will then be stored in the database and displayed in the notes list.

### Steps to Implement

1. **Create the New Note Page**
   - **Location**: `app/notes/new.tsx`
   - **Purpose**: This page will serve as the interface for creating a new note.
   - **Components**: Use shadcn/ui components for inputs and buttons, and integrate a rich text editor for content input.

2. **Set Up the Page Structure**
   - Import necessary components from shadcn/ui and the rich text editor library (e.g., react-quill).
   - Define the page layout using Tailwind CSS classes for consistent styling.
   - Example structure:
     ```typescript
     import { Input, Button } from "@/components/ui";
     import ReactQuill from 'react-quill';
     import 'react-quill/dist/quill.snow.css';

     export default function NewNotePage() {
       return (
         <div className="p-4 bg-primary text-primary-foreground">
           <h1 className="text-2xl font-bold mb-4">Create New Note</h1>
           <Input placeholder="Title" className="mb-4" />
           <ReactQuill className="mb-4 bg-white" />
           <Button className="bg-primary">Save</Button>
         </div>
       );
     }
     ```

3. **Manage State for New Note**
   - Use React state to manage the title and content of the new note.
   - Example state management:
     ```typescript
     const [title, setTitle] = useState('');
     const [content, setContent] = useState('');
     ```

4. **Handle Input Changes**
   - Update the state as the user types in the title input and the rich text editor.
   - Example handlers:
     ```typescript
     const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
       setTitle(e.target.value);
     };

     const handleContentChange = (value: string) => {
       setContent(value);
     };
     ```

5. **Implement the Save Functionality**
   - On clicking the "Save" button, trigger a function to save the note to the database.
   - Use Supabase utilities to insert the new note into the database.
   - Example save function:
     ```typescript
     import { createSupabaseClient } from '@/utils/supabase/client';

     const handleSave = async () => {
       const supabase = await createSupabaseClient();
       const { data, error } = await supabase.from('note').insert([
         { title, content }
       ]);

       if (error) {
         console.error('Error saving note:', error);
       } else {
         console.log('Note saved:', data);
         // Redirect to notes list or show a success message
       }
     };
     ```

6. **Add Navigation to the New Note Page**
   - Ensure there is a "Create Note" button in the header or notes list page that navigates to the new note page.
   - Update the header component if necessary to include this navigation link.

7. **Ensure Responsive Design**
   - Use Tailwind CSS classes to ensure the page is responsive and looks good on all devices.
   - Test the layout on different screen sizes to confirm responsiveness.

### UI Details
- **Title Input**: Use shadcn/ui Input component with appropriate Tailwind classes for styling.
- **Content Editor**: Use a rich text editor like react-quill, styled with Tailwind classes.
- **Save Button**: Use shadcn/ui Button component, styled with Tailwind classes (e.g., `bg-primary`).

### Data / State
- **State Management**: Manage the title and content using React state.
- **Database Interaction**: Use Supabase client to insert the new note into the database.

By following these steps, you will implement a fully functional "Create New Note" feature that integrates seamlessly with the existing noteum application.