We are building a next js project based on an existing next js template that have auth, payment built already, below are rules you have to follow:

<frontend rules>
1. MUST Use 'use client' directive for client-side components; In Next.js, page components are server components by default, and React hooks like useEffect can only be used in client components.
2. The UI has to look great, using polished component from shadcn, tailwind when possible; Don't recreate shadcn components, make sure you use 'shadcn@latest add xxx' CLI to add components
3. MUST adding debugging log & comment for every single feature we implement
4. Make sure to concatenate strings correctly using backslash
7. Use stock photos from picsum.photos where appropriate, only valid URLs you know exist
8. Don't update shadcn components unless otherwise specified
9. Configure next.config.js image remotePatterns to enable stock photos from picsum.photos
11. MUST implement the navigation elements items in their rightful place i.e. Left sidebar, Top header
12. Accurately implement necessary grid layouts
13. Follow proper import practices:
   - Use @/ path aliases
   - Keep component imports organized
   - Update current src/app/page.tsx with new comprehensive code
   - Don't forget root route (page.tsx) handling
   - You MUST complete the entire prompt before stopping
</frontend rules>

<styling_requirements>
- You ALWAYS tries to use the shadcn/ui library.
- You MUST USE the builtin Tailwind CSS variable based colors as used in the examples, like bg-primary or text-primary-foreground.
- You DOES NOT use indigo or blue colors unless specified in the prompt.
- You MUST generate responsive designs.
- The React Code Block is rendered on top of a white background. If v0 needs to use a different background color, it uses a wrapper element with a background color Tailwind class.
</styling_requirements>

<frameworks_and_libraries>
- You prefers Lucide React for icons, and shadcn/ui for components.
- You MAY use other third-party libraries if necessary or requested by the user.
- You imports the shadcn/ui components from "@/components/ui"
- You DOES NOT use fetch or make other network requests in the code.
- You DOES NOT use dynamic imports or lazy loading for components or libraries. Ex: const Confetti = dynamic(...) is NOT allowed. Use import Confetti from 'react-confetti' instead.
- Prefer using native Web APIs and browser features when possible. For example, use the Intersection Observer API for scroll-based animations or lazy loading.
</frameworks_and_libraries>

# Note Detail & Rich Editor Page Implementation Guide

## Task
Develop a detailed view page for a selected note that supports both editing and viewing.

## Implementation Guide

### 1. Set Up the Route

- **Location**: `app/notes/[id].tsx`
- **Purpose**: This dynamic route will handle displaying and editing a specific note based on its ID.

### 2. Fetch Note Data

- **Data Fetching**: Use the Supabase client to fetch the note data.
- **Implementation**:
  - Import the Supabase client from `utils/supabase/front.ts`.
  - Fetch the note data using the note ID from the URL.
  - Handle any errors and log them for debugging.

```typescript
import { useRouter } from 'next/router';
import { createSupabaseClient } from '@/utils/supabase/client';

export default function NoteDetail() {
  const router = useRouter();
  const { id } = router.query;
  const [note, setNote] = useState<Note | null>(null);

  useEffect(() => {
    if (id) {
      const fetchNote = async () => {
        const supabase = await createSupabaseClient();
        const { data, error } = await supabase.from('note').select().eq('id', id).single();
        if (error) {
          console.error('Error fetching note:', error);
        } else {
          setNote(data);
        }
      };
      fetchNote();
    }
  }, [id]);
}
```

### 3. Integrate Rich Text Editor

- **Library**: Use `react-quill` for the rich text editor.
- **Installation**: Ensure `react-quill` is installed in your project.
- **Implementation**:
  - Import `react-quill` and set it up for editing the note content.
  - Use `shadcn/ui` components for the title input and buttons.

```typescript
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import { Input, Button } from '@/components/ui';

function NoteEditor({ note, onSave, onDelete }) {
  const [title, setTitle] = useState(note?.title || '');
  const [content, setContent] = useState(note?.content || '');

  return (
    <div className="p-4 bg-primary">
      <Input
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Note Title"
        className="mb-4"
      />
      <ReactQuill value={content} onChange={setContent} className="mb-4" />
      <div className="flex space-x-2">
        <Button onClick={() => onSave({ title, content })} className="bg-primary">
          Save
        </Button>
        <Button onClick={onDelete} className="bg-destructive">
          Delete
        </Button>
      </div>
    </div>
  );
}
```

### 4. Implement Save and Delete Actions

- **Save Action**:
  - Update the note in the database using Supabase utilities.
  - Provide feedback to the user upon successful save.

- **Delete Action**:
  - Confirm deletion with the user using a modal.
  - Delete the note from the database and redirect the user to the notes list.

```typescript
async function handleSave(updatedNote) {
  const supabase = await createSupabaseClient();
  const { error } = await supabase
    .from('note')
    .update({ title: updatedNote.title, content: updatedNote.content })
    .eq('id', note.id);

  if (error) {
    console.error('Error saving note:', error);
  } else {
    console.log('Note saved successfully');
  }
}

async function handleDelete() {
  const supabase = await createSupabaseClient();
  const { error } = await supabase.from('note').delete().eq('id', note.id);

  if (error) {
    console.error('Error deleting note:', error);
  } else {
    console.log('Note deleted successfully');
    router.push('/notes');
  }
}
```

### 5. UI and Styling

- **Styling**: Use Tailwind CSS classes for styling.
- **Responsive Design**: Ensure the layout is responsive and adapts to different screen sizes.

### 6. Debug Logging

- **Log Fetching**: Log the note fetching process and any errors.
- **Log Actions**: Log save and delete actions for debugging purposes.

By following these steps, you will create a functional and user-friendly note detail and rich editor page that allows users to view, edit, and manage their notes effectively.Update Navigation & Header Links

