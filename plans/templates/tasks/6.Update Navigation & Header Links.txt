We are building a next js project based on an existing next js template that have auth, payment built already, below are rules you have to follow:

<frontend rules>
1. MUST Use 'use client' directive for client-side components; In Next.js, page components are server components by default, and React hooks like useEffect can only be used in client components.
2. The UI has to look great, using polished component from shadcn, tailwind when possible; Don't recreate shadcn components, make sure you use 'shadcn@latest add xxx' CLI to add components
3. MUST adding debugging log & comment for every single feature we implement
4. Make sure to concatenate strings correctly using backslash
7. Use stock photos from picsum.photos where appropriate, only valid URLs you know exist
8. Don't update shadcn components unless otherwise specified
9. Configure next.config.js image remotePatterns to enable stock photos from picsum.photos
11. MUST implement the navigation elements items in their rightful place i.e. Left sidebar, Top header
12. Accurately implement necessary grid layouts
13. Follow proper import practices:
   - Use @/ path aliases
   - Keep component imports organized
   - Update current src/app/page.tsx with new comprehensive code
   - Don't forget root route (page.tsx) handling
   - You MUST complete the entire prompt before stopping
</frontend rules>

<styling_requirements>
- You ALWAYS tries to use the shadcn/ui library.
- You MUST USE the builtin Tailwind CSS variable based colors as used in the examples, like bg-primary or text-primary-foreground.
- You DOES NOT use indigo or blue colors unless specified in the prompt.
- You MUST generate responsive designs.
- The React Code Block is rendered on top of a white background. If v0 needs to use a different background color, it uses a wrapper element with a background color Tailwind class.
</styling_requirements>

<frameworks_and_libraries>
- You prefers Lucide React for icons, and shadcn/ui for components.
- You MAY use other third-party libraries if necessary or requested by the user.
- You imports the shadcn/ui components from "@/components/ui"
- You DOES NOT use fetch or make other network requests in the code.
- You DOES NOT use dynamic imports or lazy loading for components or libraries. Ex: const Confetti = dynamic(...) is NOT allowed. Use import Confetti from 'react-confetti' instead.
- Prefer using native Web APIs and browser features when possible. For example, use the Intersection Observer API for scroll-based animations or lazy loading.
</frameworks_and_libraries>

# Update Navigation & Header Links Implementation Guide

## Task
Enhance the header component to include clear navigation links (Notes List, Create Note, Profile, Billing) using shadcn/ui components and Tailwind CSS. Ensure the header is responsive and visually consistent with the rest of the application.

## Implementation Guide

### 1. Update Header Component

**Location:** `components/app/Header.tsx`

- **Objective:** Add navigation links to the header for easy access to different sections of the application.

#### Steps:

1. **Import Required Libraries:**
   - Import necessary components from `shadcn/ui` and icons from `Lucide React`.

   ```typescript
   import { Navbar, NavItem } from "@/components/ui";
   import { Home, FilePlus, User, CreditCard } from "lucide-react";
   ```

2. **Define Navigation Links:**
   - Create an array of navigation items with paths and labels.

   ```typescript
   const navItems = [
     { path: "/notes", label: "Notes", icon: <Home /> },
     { path: "/notes/new", label: "Create Note", icon: <FilePlus /> },
     { path: "/profile", label: "Profile", icon: <User /> },
     { path: "/billing", label: "Billing", icon: <CreditCard /> },
   ];
   ```

3. **Render Navigation Links:**
   - Use `shadcn/ui` components to render the navigation items within the header.

   ```typescript
   const Header = () => {
     return (
       <Navbar className="bg-primary text-primary-foreground">
         <div className="flex items-center justify-between">
           {navItems.map((item) => (
             <NavItem key={item.path} href={item.path} className="flex items-center space-x-2">
               {item.icon}
               <span>{item.label}</span>
             </NavItem>
           ))}
         </div>
       </Navbar>
     );
   };

   export default Header;
   ```

4. **Ensure Responsiveness:**
   - Use Tailwind CSS classes to ensure the header is responsive and adapts to different screen sizes.

   ```typescript
   <div className="flex flex-col md:flex-row items-center justify-between">
     {/* Navigation items */}
   </div>
   ```

### 2. Style the Header

- **Objective:** Ensure the header matches the application's design system using Tailwind CSS.

#### Steps:

1. **Apply Tailwind CSS Classes:**
   - Use built-in Tailwind CSS variable-based colors for consistency.

   ```typescript
   className="bg-primary text-primary-foreground"
   ```

2. **Add Hover Effects:**
   - Enhance user experience with hover effects on navigation items.

   ```typescript
   <NavItem
     key={item.path}
     href={item.path}
     className="flex items-center space-x-2 hover:bg-primary-hover"
   >
     {item.icon}
     <span>{item.label}</span>
   </NavItem>
   ```

### 3. Test Navigation

- **Objective:** Ensure that each navigation link routes to the correct page and the header remains consistent across different sections.

#### Steps:

1. **Verify Navigation Links:**
   - Click each navigation link to ensure it routes to the correct page (e.g., `/notes`, `/notes/new`, `/profile`, `/billing`).

2. **Check Responsiveness:**
   - Resize the browser window to ensure the header adapts to different screen sizes without breaking the layout.

3. **Confirm Visual Consistency:**
   - Ensure the header's appearance is consistent with the rest of the application, using the same color scheme and design elements.

By following these steps, the header will be updated to include clear navigation links, enhancing the user experience by providing easy access to different sections of the application.