/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as LoginRouteImport } from './routes/login';
import { Route as DashboardRouteImport } from './routes/dashboard';
import { Route as IndexRouteImport } from './routes/index';
import { Route as AuthCallbackRouteImport } from './routes/auth.callback';
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs';
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request';

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any);
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any);
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/dashboard': typeof DashboardRoute;
  '/login': typeof LoginRoute;
  '/auth/callback': typeof AuthCallbackRoute;
  '/demo/start/api-request': typeof DemoStartApiRequestRoute;
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/dashboard': typeof DashboardRoute;
  '/login': typeof LoginRoute;
  '/auth/callback': typeof AuthCallbackRoute;
  '/demo/start/api-request': typeof DemoStartApiRequestRoute;
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/dashboard': typeof DashboardRoute;
  '/login': typeof LoginRoute;
  '/auth/callback': typeof AuthCallbackRoute;
  '/demo/start/api-request': typeof DemoStartApiRequestRoute;
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/auth/callback'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/auth/callback'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs';
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/auth/callback'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DashboardRoute: typeof DashboardRoute;
  LoginRoute: typeof LoginRoute;
  AuthCallbackRoute: typeof AuthCallbackRoute;
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute;
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/dashboard': {
      id: '/dashboard';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof DashboardRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/auth/callback': {
      id: '/auth/callback';
      path: '/auth/callback';
      fullPath: '/auth/callback';
      preLoaderRoute: typeof AuthCallbackRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs';
      path: '/demo/start/server-funcs';
      fullPath: '/demo/start/server-funcs';
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/demo/start/api-request': {
      id: '/demo/start/api-request';
      path: '/demo/start/api-request';
      fullPath: '/demo/start/api-request';
      preLoaderRoute: typeof DemoStartApiRequestRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
